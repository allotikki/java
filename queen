def isSafe(board, row, col, n):
    # Check if there is a queen in the same row
    for i in range(col):
        if board[row][i] == 1:
            return False

    # Check if there is a queen in the upper diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    # Check if there is a queen in the lower diagonal
    for i, j in zip(range(row, n, 1), range(col, -1, -1)):
        if board[i][j] == 1:
            return False

    return True

def solveNQueensUtil(board, col, n):
    # Base case: all queens have been placed
    if col == n:
        return True

    # Try placing the queen in each row of the current column
    for i in range(n):
        if isSafe(board, i, col, n):
            board[i][col] = 1

            # Recur to place the rest of the queens
            if solveNQueensUtil(board, col+1, n):
                return True

            # Backtrack and remove the queen if it does not lead to a solution
            board[i][col] = 0

    return False

def solveNQueens(n):
    # Initialize an empty board
    board = [[0 for _ in range(n)] for _ in range(n)]

    # Call the recursive utility function to solve the problem
    if not solveNQueensUtil(board, 0, n):
        print("No solution exists.")
        return False

    # Print the solution
    for i in range(n):
        for j in range(n):
            print(board[i][j], end=" ")
        print()

    return True
solveNQueens(4)
