Aim: Simple TCP/IP Client Server Communication
GIVEN REQUIREMENTS:
Simple TCP/IP Client Server Communication.
OBJECTIVE:
To Implement and establish a simple client server Communication
METHODOLOGY:
Server:
• Include the necessary header files.
• Create a socket using socket function with family AF_INET, type as
SOCK_DGRAM.
• Initialize server address to 0 using the bzero function.
• Assign the sin family to AF_INET, sin_addr to INADDR_ANY, sin_port to
SERVER_PORT, a macro defined port number.
• Bind the local host address to socket using the bind function.
• Within an infinite loop, receive message from the client using recv from function,
print it
on the console and send (echo) the message back to the client using send to
function.
Client:
• Include the necessary header files.
• Create a socket using socket function with family AF_INET, type as
SOCK_DGRAM.
• Initialize server address to 0 using the bzero function.
• Assign the sin_family to AF_INET.
• Get the server IP address from the console.
• Using gethostbyname function assign it to a hostent structure, and assign it to
sin_addr of
the server address structure.
• Within an infinite loop, read message from the console and send the message to
the

9

server using the sendto function.
• Receive the echo message using the recvfrom function and print it on the
console.
Code :
Server:
import socket # for socket
import sys
try:
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print ("Socket successfully created")
except socket.error as err:
print ("socket creation failed with error %s" %(err))
# default port for socket
port = 80
try:
host_ip = socket.gethostbyname('www.google.com')
except socket.gaierror:
print ("there was an error resolving the host")
sys.exit()
s.connect((host_ip, port))
print ("the socket has successfully connected to google”)
Client :
import socket
s = socket.socket()
print ("Socket successfully created")
port = 12345
s.bind(('', port))
print ("socket binded to %s" %(port))
s.listen(5)
print ("socket is listening")

10

while True:
# Establish connection with client.
c, addr = s.accept()
print ('Got connection from', addr )
c.send('Thank you for connecting'.encode())
c.close()
break

OUTPUT

Result : A simple Server Client Connection was established with TCP/IP
