Aim : Half Duplex Chat using TCP/IP.
GIVEN REQUIREMENTS: There are two hosts, Client and Server. Both the Client and
the Server exchange message i.e. they send messages or receive message from the
other. There is only a single way communication between them.
OBJECTIVE:
To implement a half duplex application, where the Client establishes a connection with
the Server. The Client can send and the server well receive messages at the same time.
METHODOLOGY:
Server:
Include the necessary header files.
• Create a socket using socket function with family AF_INET, type as SOCK_STREAM.
• Initialize server address to 0 using the bzero function.
• Assign the sin_family to AF_INET, sin_addr to INADDR_ANY, sin_port to dynamically
• assigned port number.
• Bind the local host address to socket using the bind function.
• Listen on the socket for connection request from the client.
• Accept connection request from the Client using accept function.
• Fork the process to receive message from the client and print it on the console.
• Read message from the console and send it to the client.
Client:
• Include the necessary header files.
• Create a socket using socket function with family AF_INET, type as SOCK_STREAM.
• Initialize server address to 0 using the bzero function.
• Assign the sin_family to AF_INET.
• Get the server IP address and the Port number from the console.
• Using gethostbyname function assign it to a hostent structure, and assign it to
sin_addr of the server
address structure.
• Request a connection from the server using the connect function.
• Fork the process to receive message from the server and print it on the console.
• Read message from the console and send it to the server.
CODE:
#Server Side Script
from socket import *
server_port = 5000
server_socket = socket(AF_INET,SOCK_STREAM) server_socket.bind(('',server_port))
server_socket.listen(1)
print ("Welcome: The server is now ready to receive") connection_socket, address =
server_socket.accept() while True:

16

sentence = connection_socket.recv(2048).decode() print('>> ',sentence)
message = input(">> ") connection_socket.send(message.encode()) if(message == 'q'):
connectionSocket.close()
# Client Side Script
from socket import *
server_name = 'localhost'
server_port = 5000
client_socket=socket(AF_INET,SOCK_STREAM)
client_socket.connect((server_name,server_port))
while True:
sentence = input(">> ")
client_socket.send(sentence.encode())
message = client_socket.recv(2048)
print (">> ", message.decode())
if(sentence == 'q'):
client_socket.close()
OUTPUT:
SERVER:

Client:

RESULT: Thus the FTP client-server communication is established and data is
transferred between the client and server machines.
